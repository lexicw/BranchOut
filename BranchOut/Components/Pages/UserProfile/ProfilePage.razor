@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IProfileRepository _profileRepository
@inject ProfileState ProfileState
@inject LinksState LinksState

<style>
    .text-color {
        color: @(profile?.TextColor);
    }
</style>

@if (UserExists)
{
    <HeadContent>
        <link rel="stylesheet"
              href="@($"https://fonts.googleapis.com/css?family=Sofia|Inter|Merriweather|Miniver|Oswald|Raleway|Yomogi|Silkscreen|Fresca")" />
    </HeadContent>
    <div class="text-center pt-5 bg-@profile.Theme font-@profile.Font h-100 text-color">
        <div class="px-4">
            <svg class="bd-placeholder-img" width="100px" height="100px" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false">
                <rect width="100%" height="100%" fill="lightgray" />
                <text x="50%" y="50%" dy=".4em" text-anchor="middle" font-size="40" fill="black">
                    @User.UserName?.Substring(0, 1).ToUpper()
                </text>
            </svg>
            <div class="fs-3 mt-2 fw-bold">@User.UserName</div>
            <div class="fs-6">@profile.Message</div>

            <div class="row">
                <div class="col-12 col-md-8 mx-auto">
                    @foreach (var link in UserLinks.OrderBy(x => x.Sort))
                    {
                        if (link.Visible == true)
                        {
                            <div class="d-grid gap-2">
                                <a href="@link.URL" target="_blank" class="btn btn-primary btn-@profile.ButtonShape border-@profile.ButtonBorder mt-2" type="button">@link.Name</a>
                            </div>
                        }

                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center mt-4">
        <h1>User Not Found</h1>
        <p>The profile you are looking for does not exist.</p>
        <a href="/" class="btn btn-primary">Go Home</a>
    </div>
}

@code {
    [CascadingParameter(Name = "User")]
    public ApplicationUser User { get; set; }

    [CascadingParameter(Name = "Profile")]
    public Profile profile { get; set; }

    [CascadingParameter(Name = "Links")]
    public List<Link> UserLinks { get; set; }


    private bool UserExists { get; set; } = true;

    protected override void OnInitialized()
    {
        ProfileState.OnChange += StateHasChanged;
        LinksState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProfileState.OnChange -= StateHasChanged;
        LinksState.OnChange -= StateHasChanged;
    }
}
