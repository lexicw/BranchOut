@layout ProfileLayout
@page "/profile/{username}"

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IProfileRepository _profileRepository
@inject UserService _userService

@if (UserExists)
{
    <div class="text-center pt-5 bg-@profile.Theme h-100">
        <div class="px-4">
            <svg class="bd-placeholder-img" width="100px" height="100px" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false">
                <rect width="100%" height="100%" fill="lightgray" />
                <text x="50%" y="50%" dy=".4em" text-anchor="middle" font-size="40" fill="black">
                    @UserName?.Substring(0, 1).ToUpper()
                </text>
            </svg>
            <div class="fs-3 mt-2 fw-bold">@UserName</div>
            <div class="fs-6">@profile.Message</div>

            @foreach (var link in profile.Links)
            {
                <div class="d-grid gap-2">
                    <a href="@link.URL" target="_blank" class="btn btn-primary mt-1" type="button">@link.Name</a>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="text-center mt-4">
        <h1>User Not Found</h1>
        <p>The profile you are looking for does not exist.</p>
        <a href="/" class="btn btn-primary">Go Home</a>
    </div>
}

@code {
    [Parameter]
    public string? UserName { get; set; }

    public Profile? profile { get; set; } = new Profile();

    private bool UserExists { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async void RefreshProfile()
    {
        await LoadProfile();
        StateHasChanged();
    }

    private async Task LoadProfile()
    {
        var user = await UserManager.FindByNameAsync(UserName);
        if (user == null)
        {
            UserExists = false;
            return;
        }

        profile = await _profileRepository.GetAsync(user.Id);
        if (profile == null)
        {
            UserExists = false;
            return;
        }
    }

}
