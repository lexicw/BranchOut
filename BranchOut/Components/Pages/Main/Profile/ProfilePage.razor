@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IProfileRepository _profileRepository
@inject ProfileState ProfileState
@inject LinksState LinksState

<style>
    .bg-color {
        background-color: @(profile?.BackgroundColor);
    }
    .text-color {
        color: @(profile?.TextColor);
    }

    .btn-roundness {
        border-radius: @(profile?.ButtonRoundness + "px");
    }

    .btn-color {
        background-color: @(profile?.ButtonColor);
        color: @(profile?.ButtonTextColor);
    }

     .btn-color:hover {
        background-color: @(ButtonColorLight);
        color: @(profile?.ButtonTextColor);
   }

    .btn-color:focus, .btn-color:active {
         background-color: @(ButtonColorLight);
         box-shadow: 0 0 0 .25rem rgba(@(ButtonColorLightRGB),.40) !important;
         color: @(profile?.ButtonTextColor);
    }

    .border-settings {
    border: @(profile?.ButtonBorder)px solid @(profile?.ButtonBorderColor) !important;
    }
</style>

@if (UserExists)
{
    <HeadContent>
        <link rel="stylesheet"
              href="@($"https://fonts.googleapis.com/css?family=Sofia|Inter|Merriweather|Miniver|Oswald|Raleway|Yomogi|Silkscreen|Fresca")" />
    </HeadContent>
    <div class="text-center pt-5 bg-color gradient-@profile.Gradient font-@profile.Font h-100 text-color">
        <div class="px-4">
            <ProfileImage Width="100px" Height="100px" Username="@User.UserName" FontSize="40" ImagePath=""/>

            <div class="fs-3 mt-2 fw-bold">@User.UserName</div>
            <div class="fs-6">@profile.Message</div>

            <div class="row">
                <div class="mx-auto @LayoutClass">
                    @foreach (var link in UserLinks.OrderBy(x => x.Sort))
                    {
                        if (link.Visible == true)
                        {
                            <div class="d-grid gap-2">
                                <a href="@link.URL" target="_blank" class="btn btn-primary btn-roundness border-settings mt-2 btn-color btn-effect-@profile.ButtonEffect" type="button">@link.Name</a>
                            </div>
                        }

                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center mt-4">
        <h1>User Not Found</h1>
        <p>The profile you are looking for does not exist.</p>
        <a href="/" class="btn btn-primary">Go Home</a>
    </div>
}

@code {
    [CascadingParameter(Name = "User")]
    public ApplicationUser User { get; set; }

    [CascadingParameter(Name = "Profile")]
    public Profile profile { get; set; }

    [CascadingParameter(Name = "Links")]
    public List<Link> UserLinks { get; set; }

    [Parameter] public bool PhoneMode { get; set; } = false;

    private string LayoutClass => PhoneMode ? "col-8" : "col-8 col-lg-4";

    public string ButtonColorLight = "transparent";

    public string ButtonColorLightRGB { get; set; }

    private bool UserExists { get; set; } = true;

    protected override void OnInitialized()
    {
        ProfileState.OnChange += StateHasChanged;
        LinksState.OnChange += StateHasChanged;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        SetButtonColors();
    }

    private void SetButtonColors()
    {
        if (profile is null || string.IsNullOrEmpty(profile.ButtonColor))
            return;

        var newButtonColorLight = (profile.ButtonColor == "transparent")
            ? "transparent"
            : ColorUtils.LightenColor(profile.ButtonColor, 0.1);

        if (ButtonColorLight != newButtonColorLight)
        {
            ButtonColorLight = newButtonColorLight;
            ButtonColorLightRGB = (newButtonColorLight == "transparent")
                ? "255,255,255"
                : ColorUtils.HexToRgbString(newButtonColorLight);

            StateHasChanged();
        }
    }

    public void Dispose()
    {
        ProfileState.OnChange -= StateHasChanged;
        LinksState.OnChange -= StateHasChanged;
    }
}
