@page "/links"
@inject IJSRuntime _JS
@inject ILinkRepository _linkRepository
@inject LinksState LinksState


<div class="w-75 mx-auto mt-5">
<div class="row align-items-end">
    <div class="col-6">
        <h1 class="fs-4 m-0">Your Links</h1>
    </div>
    <div class="col-6 text-end"><button class="btn btn-primary mt-3" @onclick='() => OpenModal("addLinkModal")'>Add Link</button></div>
</div>

<AddLinkModal ModalClose='(bool success) => CloseModal("addLinkModal", success)' />

<DeleteLinkModal LinkToDelete="@SelectedLink"
                 ModalClose='(bool success) => CloseModal("deleteLinkModal", success)' />

@if (IsProcessing)
{
    <div class="mt-3">Loading....</div>
}
else
{
    @if (UserLinks == null || UserLinks.Count == 0)
    {
        <div class="text-center mt-3">You currently have no links.</div>
    }
    else
    {
        <SortableList Items="UserLinks" Context="link"
                      OnUpdate="HandleUpdate"
                      Sort="true"
                      ForceFallback="true"
                      Group="linksGroup"
                      Id="linksListId">

            <SortableItemTemplate>
                <div class="card mt-2 draggable-card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6">
                                <h5 class="card-title fw-bold">@link.Name</h5>
                                <p class="card-text">
                                    @link.URL
                                    <a href="@link.URL" target="_blank" class="ms-2">
                                        <i class="bi bi-box-arrow-up-right"></i>
                                    </a>
                                </p>
                            </div>
                            <div class="col-6 text-end fs-5">
                                <div>
                                    <button class="border-0 bg-transparent">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="border-0 bg-transparent" @onclick='() => OpenModal("deleteLinkModal", link.Id)'>
                                        <i class="bi bi-trash-fill"></i>
                                    </button>
                                </div>
                                <div class="d-flex justify-content-end">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input"
                                               @bind="link.Visible"
                                               @bind:after="() => { SaveVisibility(link); }"
                                               type="checkbox"
                                               role="switch"
                                               id="flexSwitchCheckDefault">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </SortableItemTemplate>
        </SortableList>

    }
}

    <h2 class="fs-4 mt-5">Social Media</h2>
    <div class="shadow-sm rounded-3 bg-white w-100 p-5">

    </div>

</div>

@code {
    private bool IsProcessing { get; set; } = true;

    [CascadingParameter(Name = "User")]
    public ApplicationUser User { get; set; }

    [CascadingParameter(Name = "Links")]
    public List<Link> UserLinks { get; set; }

    private int SelectedLink { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = false;
    }

    private async Task LoadUserLinks()
    {
        UserLinks = await _linkRepository.GetAllAsync(User.Id);
        IsProcessing = false;
    }


    private void OpenModal(string modalId, int? linkId = null)
    {
        if (linkId.HasValue)
            SelectedLink = linkId.Value;

        _JS.InvokeVoidAsync("showModal", modalId);
    }

    private async Task CloseModal(string modalId, bool success)
    {
        await _JS.InvokeVoidAsync("hideModal", modalId);
        if (success)
        {
            await LoadUserLinks();
        }
    }

    private async Task HandleUpdate((int oldIndex, int newIndex) indexes)
    {
        var (oldIndex, newIndex) = indexes;
        if (oldIndex == newIndex) return;

        var movedItem = UserLinks[oldIndex];
        UserLinks.RemoveAt(oldIndex);
        UserLinks.Insert(newIndex, movedItem);

        for (int i = 0; i < UserLinks.Count; i++)
        {
            UserLinks[i].Sort = i;
        }

        await _linkRepository.UpdateLinksOrderAsync(UserLinks);

        await LinksState.UpdateLinkOrderAsync(UserLinks, _linkRepository);
    }

    private async Task SaveVisibility(Link link)
    {
        await _linkRepository.UpdateAsync(link);
        await LinksState.UpdateLinkAsync(link, _linkRepository);
        await LoadUserLinks();
    }

}
