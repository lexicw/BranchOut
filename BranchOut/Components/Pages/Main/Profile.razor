@page "/profile"

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IProfileRepository _profileRepository
@inject UserService _userService
@inject IJSRuntime _JS


<div class="mt-5 w-75 mx-auto">
    <h1 class="fs-4">Profile</h1>
    <div class="shadow-sm rounded-3 bg-white w-100 p-5">
        <h2 class="fs-6">Image:</h2>
        <div class="position-relative mx-auto" style="width:150px;height:150px;">
            <div class="position-absolute" style="right:0;bottom:0;">
                <button class="btn btn-primary">
                    <i class="bi bi-image"></i>
                </button>
            </div>
            <svg class="bd-placeholder-img" width="150px" height="150px" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false">
                <rect width="100%" height="100%" fill="lightgray" />
                <text x="50%" y="50%" dy=".4em" text-anchor="middle" font-size="50" fill="black">
                    @UserName?.Substring(0, 1).ToUpper()
                </text>
            </svg>
        </div>
        <div class="mt-5">
            <div class="fs-6">Message:</div>
            <div class="mx-auto">
                <textarea class="form-control" id="txtMessage" style="height: 100px"
                          @onchange="UpdateProfile">@profile.Message</textarea>

            </div>
        </div>
    </div>


    <h1 class="fs-4 mt-5">Background</h1>
    <div class="shadow-sm rounded-3 bg-white w-100 p-5 mb-5">
        <InputRadioGroup @bind-Value="Theme">
            <div class="radio-cards">
                <label class="radio-card text-center">
                    <InputRadio class="radio" Value=@("none") />
                    <span class="radio-card-body">
                        <br />
                        <span class="border border-1 bg-square mx-auto"></span>
                        <br />None
                    </span>
                </label>

                <label class="radio-card text-center">
                    <InputRadio class="radio" Value=@("cherry-blossom") />
                    <span class="radio-card-body">
                        <br />
                        <span class="border border-1 bg-square mx-auto bg-cherry-blossom"></span>
                        <br />Cherry Blossom
                    </span>
                </label>

                <label class="radio-card text-center">
                    <InputRadio class="radio" Value=@("tropical") />
                    <span class="radio-card-body">
                        <br />
                        <span class="border border-1 bg-square mx-auto bg-tropical"></span>
                        <br />Tropical
                    </span>
                </label>

                <label class="radio-card text-center">
                    <InputRadio class="radio" Value=@("northern-lights") />
                    <span class="radio-card-body">
                        <br />
                        <span class="border border-1 bg-square mx-auto bg-northern-lights"></span>
                        <br />Northern Lights
                    </span>
                </label>

                <label class="radio-card text-center">
                    <InputRadio class="radio" Value=@("vibrant") />
                    <span class="radio-card-body">
                        <br />
                        <span class="border border-1 bg-square mx-auto bg-vibrant"></span>
                        <br />Vibrant
                    </span>
                </label>

                <label class="radio-card text-center">
                    <InputRadio class="radio" Value=@("lime") />
                    <span class="radio-card-body">
                        <br />
                        <span class="border border-1 bg-square mx-auto bg-lime"></span>
                        <br />Lime
                    </span>
                </label>
            </div>
        </InputRadioGroup>



    </div>



</div>


@code {
    [Parameter]
    public string? UserName { get; set; }

    public BranchOut.Data.Profile? profile { get; set; } = new BranchOut.Data.Profile();

    private string Theme
    {
        get => profile.Theme;
        set
        {
            if (profile.Theme != value)
            {
                profile.Theme = value;
                UpdateTheme();
            }
        }
    }

    private bool UserExists { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async Task RefreshProfile()
    {
        await LoadProfile();
        StateHasChanged();
    }

    private async Task LoadProfile()
    {
        var currentUser = await _userService.GetCurrentUserAsync();
        UserName = currentUser.UserName;
        if (currentUser == null)
            return;

        var userId = currentUser.Id.ToString();
        profile = await _profileRepository.GetAsync(userId);
    }

    private async Task UpdateProfile(ChangeEventArgs e)
    {
        profile.Message = e.Value?.ToString();

        await _profileRepository.UpdateAsync(profile);
        StateHasChanged();
        RefreshPhone();
    }

    private async Task RefreshPhone()
    {
        await _JS.InvokeVoidAsync("reloadIframe", "profileFrame");
    }

    private async Task UpdateTheme()
    {

        await _profileRepository.UpdateAsync(profile);
        StateHasChanged();
        RefreshPhone();
    }
}
