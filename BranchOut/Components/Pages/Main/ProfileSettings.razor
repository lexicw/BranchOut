@page "/profile"

@inject NavigationManager NavigationManager
@inject IProfileRepository _profileRepository
@inject IJSRuntime _JS
@inject ProfileState ProfileState

<div class="row">
    <div class="mt-5 col-12 col-lg-9 mx-auto">
        <h1 class="fs-4">Profile</h1>
        <div class="shadow-sm rounded-3 bg-white w-100 p-5">
            <h2 class="fs-6">Image:</h2>
            <div class="position-relative mx-auto" style="width:150px;height:150px;">
                <div class="position-absolute" style="right:0;bottom:0;">
                    <button class="btn btn-primary">
                        <i class="bi bi-image"></i>
                    </button>
                </div>
                <svg class="bd-placeholder-img" width="150px" height="150px" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" preserveAspectRatio="xMidYMid slice" focusable="false">
                    <rect width="100%" height="100%" fill="#333333" />
                    <text x="50%" y="50%" dy=".4em" text-anchor="middle" font-size="50" fill="#FFFFFF">
                        @User.UserName?.Substring(0, 1).ToUpper()
                    </text>
                </svg>
            </div>
            <div class="mt-5">
                <div class="fs-6">Message:</div>
                <div class="mx-auto">
                    <textarea class="form-control" id="txtMessage" style="height: 100px"
                              @onchange="UpdateProfile">@profile.Message</textarea>

                </div>
            </div>
        </div>

        <BackgroundOptions ValueChange="UpdateProfilePage"></BackgroundOptions>
        <TextOptions ValueChange="UpdateProfilePage"></TextOptions>
        <ButtonOptions ValueChange="UpdateProfilePage"></ButtonOptions>
 
    </div>
</div>

<br />
<br />


@code {
    [CascadingParameter(Name = "User")]
    public ApplicationUser User { get; set; }

    [CascadingParameter(Name = "Profile")]
    public Profile profile { get; set; }

    private bool UserExists { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async Task LoadProfile()
    {
        var currentUser = User;

        var userId = currentUser.Id.ToString();
    }

    private async Task UpdateProfile(ChangeEventArgs e)
    {
        profile.Message = e.Value?.ToString();

        await UpdateProfilePage();
    }

    private async Task UpdateProfilePage()
    {

        await _profileRepository.UpdateAsync(profile);
        await ProfileState.UpdateProfileAsync(profile, _profileRepository);
    }
}
