@inject IJSRuntime _JS
@inject ILinkRepository _linkRepository
@inject LinksState LinksState

<div class="row align-items-end">
    <div class="col-6">
        <h1 class="fs-4 m-0">Your Links</h1>
    </div>
    <div class="col-6 text-end"><button class="btn btn-primary mt-3 px-4 rounded-pill btn-lg" @onclick='CallAddLinkModal'>Add Link</button></div>
</div>

<UpsertModal Item="Link" ModalClose='(bool success) => CloseModal("upsertLinkModal", success)' Id="Link.Id">
    <ModalFieldsTemplate>
        <EditForm Model="@Link" FormName="formAddLink" OnValidSubmit="() => UpsertLink(Link.Id)">
            <div class="modal-body">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <label>Name:</label>
                <FieldComponent Label="Name">
                    <ValidationControl>
                        <ValidationMessage For="() => Link.Name" class="text-danger"></ValidationMessage>
                    </ValidationControl>
                    <Control>
                        <InputText @bind-Value="Link.Name" class="form-control"></InputText>
                    </Control>
                </FieldComponent>
                <label class="mt-2">URL:</label>
                <FieldComponent Label="URL">
                    <ValidationControl>
                        <ValidationMessage For="() => Link.URL" class="text-danger"></ValidationMessage>
                    </ValidationControl>
                    <Control>
                        <InputText @bind-Value="Link.URL" class="form-control"></InputText>
                    </Control>
                </FieldComponent>
            </div>
            <div class="modal-footer flex-nowrap p-0 mt-3">
                <button type="submit" class="btn btn-lg btn-link text-decoration-none col-6 py-3 m-0 rounded-0 border-end link-primary fw-bold">
                    <span class="fs-6">@(Link.Id == 0 ? "Add" : "Edit") Link</span>
                </button>
                <button type="button" class="btn btn-lg btn-link fs-6 text-decoration-none col-6 py-3 m-0 rounded-0 link-dark fw-bold" data-bs-dismiss="modal">Cancel</button>
            </div>
        </EditForm>
    </ModalFieldsTemplate>
</UpsertModal>

<DeleteModal Item="Link" ModalClose='(bool success) => CloseModal("deleteLinkModal", success)' OnConfirm="() => DeleteLink()" />

@if (UserLinks == null || UserLinks.Count == 0)
{
    <div class="text-center mt-3">You currently have no links.</div>
}
else
{
    <SortableList Items="UserLinks" Context="link"
                  OnUpdate="UpdateLinkSortIndexes"
                  Sort="true"
                  ForceFallback="true"
                  Group="linksGroup"
                  Id="linksListId">

        <SortableItemTemplate>
            <div class="card mt-2 draggable-card shadow-subtle">
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <h5 class="card-title fw-bold">@link.Name</h5>
                            <p class="card-text">
                                @link.URL
                                <a href="@link.URL" target="_blank" class="ms-2">
                                    <i class="bi bi-box-arrow-up-right"></i>
                                </a>
                            </p>
                        </div>
                        <div class="col-6 text-end fs-5">
                            <div>
                                <button class="border-0 bg-transparent" @onclick='() => CallEditLinkModal(link.Id)'>
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button class="border-0 bg-transparent" @onclick='() => CallDeleteLinkModal(link.Id)'>
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </div>
                            <div class="d-flex justify-content-end">
                                <div class="form-check form-switch">
                                    <input class="form-check-input"
                                           @bind="link.Visible"
                                           @bind:after="() => { SaveVisibility(link); }"
                                           type="checkbox"
                                           role="switch"
                                           id="flexSwitchCheckDefault">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </SortableItemTemplate>
    </SortableList>
}

@code {
    [CascadingParameter(Name = "User")]
    public ApplicationUser User { get; set; }

    [CascadingParameter(Name = "Links")]
    public List<Link> UserLinks { get; set; }

    private Link Link = new Link();

    private int SelectedLink { get; set; }

    private async Task LoadUserLinks()
    {
        UserLinks = await _linkRepository.GetAllAsync(User.Id);
    }

    private async Task CallAddLinkModal()
    {
        Link = new Link();
        OpenModal("upsertLinkModal");
    }

    private async Task CallEditLinkModal(int Id)
    {
        if (Id > 0)
        {
            Link = await _linkRepository.GetAsync(Id);
            OpenModal("upsertLinkModal");
        }
    }

    private async Task CallDeleteLinkModal(int Id)
    {
        SelectedLink = Id;
        OpenModal("deleteLinkModal");
    }

    private void OpenModal(string modalId, int? linkId = null)
    {
        _JS.InvokeVoidAsync("showModal", modalId);
    }

    private async Task CloseModal(string modalId, bool success)
    {
        await _JS.InvokeVoidAsync("hideModal", modalId);
        if (success)
        {

        }
    }

    private async Task UpdateLinkSortIndexes((int oldIndex, int newIndex) indexes)
    {
        var (oldIndex, newIndex) = indexes;
        if (oldIndex == newIndex) return;

        var movedItem = UserLinks[oldIndex];
        UserLinks.RemoveAt(oldIndex);
        UserLinks.Insert(newIndex, movedItem);

        for (int i = 0; i < UserLinks.Count; i++)
        {
            UserLinks[i].Sort = i;
        }

        await _linkRepository.UpdateLinksOrderAsync(UserLinks);

        await LinksState.UpdateLinkOrderAsync(UserLinks, _linkRepository);
    }

    private async Task SaveVisibility(Link link)
    {
        await _linkRepository.UpdateAsync(link);
        await LinksState.UpdateLinkAsync(link, _linkRepository);
        await LoadUserLinks();
    }

    private async Task UpsertLink(int Id)
    {
        if (Link.Id == 0)
        {
            var currentUser = User;
            var userId = currentUser.Id;

            await _linkRepository.CreateAsync(Link, userId);
            UserLinks.Add(Link);
            await LinksState.UpdateLinkOrderAsync(UserLinks, _linkRepository);
            Link = new Link();
        }
        else
        {
            await _linkRepository.UpdateAsync(Link);
            await LinksState.UpdateLinkAsync(Link, _linkRepository);
        }

        await CloseModal("upsertLinkModal", true);
    }

    private async Task DeleteLink()
    {
        await _linkRepository.DeleteAsync(SelectedLink);
        var link = UserLinks.FirstOrDefault(l => l.Id == SelectedLink);
        if (link != null)
        {
            UserLinks.Remove(link);
        }
        await LinksState.UpdateLinkOrderAsync(UserLinks, _linkRepository);
        await CloseModal("deleteLinkModal", true);
    }
}
