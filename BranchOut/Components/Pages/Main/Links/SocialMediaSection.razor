@inject IJSRuntime _JS
@inject ISocialMediaRepository _socialMediaRepository
@inject SocialMediaState SocialMediaState

<div class="row align-items-end mt-5 mb-2">
    <div class="col-6">
        <h1 class="fs-4 m-0">Social Media</h1>
    </div>
    <div class="col-6 text-end">
        <button class="btn btn-primary mt-3 px-4 rounded-pill" @onclick='CallAddSocialModal'>Add Social Icon</button>
    </div>
</div>

<UpsertModal Item="Social" ModalClose='(bool success) => CloseModal("upsertSocialModal", success)' Id="Social.Id">
    <ModalFieldsTemplate>
        <EditForm Model="@Social" FormName="formAddSocial" OnValidSubmit="() => UpsertSocial(Social.Id)">
            <div class="modal-body">
                <DataAnnotationsValidator />
                <label class="mb-2">Platform:</label>
                <FieldComponent Label="Platform">
                    <ValidationControl>
                        <ValidationMessage For="() => Social.Platform" class="text-danger" />
                    </ValidationControl>
                    <Control>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var platform in Enum.GetValues<SocialMediaPlatform>())
                            {
                                <button type="button"
                                class="btn @(Social.Platform == platform ? "btn-primary" : "btn-outline-primary") fs-4 rounded-pill"
                                @onclick="() => SelectPlatform(platform)"
                                title="@platform.ToString()">
                                    <i class='bi bi-@platform.ToString().ToLower()'></i>
                                </button>
                            }
                        </div>
                    </Control>
                </FieldComponent>

                <label class="mt-3">URL:</label>
                <FieldComponent Label="URL">
                    <ValidationControl>
                        <ValidationMessage For="() => Social.URL" class="text-danger" />
                    </ValidationControl>
                    <Control>
                        <InputText @bind-Value="Social.URL" class="form-control" />
                    </Control>
                </FieldComponent>
            </div>

            <div class="modal-footer flex-nowrap p-0 mt-3">
                <button type="submit" class="btn btn-lg btn-link text-decoration-none col-6 py-3 m-0 rounded-0 border-end link-primary fw-bold">
                    <span class="fs-6">@(Social.Id == 0 ? "Add" : "Edit") Social Media Link</span>
                </button>
                <button type="button" class="btn btn-lg btn-link fs-6 text-decoration-none col-6 py-3 m-0 rounded-0 link-dark fw-bold" data-bs-dismiss="modal">Cancel</button>
            </div>
        </EditForm>
    </ModalFieldsTemplate>
</UpsertModal>

<DeleteModal Item="Social" ModalClose='(bool success) => CloseModal("deleteSocialModal", success)' OnConfirm="() => DeleteSocial()" />

<div class="section-shadow rounded-3 bg-white w-100 p-5 mb-5">
    @if (UserSocials == null || UserSocials.Count == 0)
    {
        <div class="text-center mt-3">You currently have no social media links.</div>
    }
    else
    {
        <div class="mt-2">
            <h3 class="fs-5">Social Media Icons:</h3>
            <div class="row g-3">
                @foreach (var social in UserSocials)
                {
                    <div class="col-12 col-md-6 col-xxl-4">
                        <div class="card">
                            <div class="card-body d-flex justify-content-center align-items-center shadow-subtle">
                                <div>
                                    <div class="display-3 text-center icon-gradient"><i class='bi bi-@social.Platform.ToString().ToLower()'></i></div>
                                    <div class="text-center fw-bold">@social.Platform</div>
                                    <div class="text-tiny">
                                        @social.URL
                                    </div>
                                </div>
                            </div>
                            <div class="fs-5 position-absolute" style="top:10px;right:10px;">
                                <button class="border-0 bg-transparent" @onclick='() => CallDeleteSocialModal(social.Id)'>
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [CascadingParameter(Name = "User")]
    public ApplicationUser User { get; set; }

    [CascadingParameter(Name = "Socials")]
    public List<SocialMedia> UserSocials { get; set; }

    private SocialMedia Social = new();
    private int SelectedSocialId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserSocials();
    }

    private async Task CallAddSocialModal()
    {
        Social = new SocialMedia();
        OpenModal("upsertSocialModal");
    }

    private async Task CallEditSocialModal(int id)
    {
        if (id > 0)
        {
            Social = await _socialMediaRepository.GetAsync(id);
            OpenModal("upsertSocialModal");
        }
    }

    private async Task CallDeleteSocialModal(int id)
    {
        SelectedSocialId = id;
        OpenModal("deleteSocialModal");
    }

    private void OpenModal(string modalId)
    {
        _JS.InvokeVoidAsync("showModal", modalId);
    }

    private async Task CloseModal(string modalId, bool success)
    {
        await _JS.InvokeVoidAsync("hideModal", modalId);
        if (success)
        {
            await LoadUserSocials();
        }
    }

    private async Task LoadUserSocials()
    {
        UserSocials = await _socialMediaRepository.GetAllAsync(User.Id);
    }

    private async Task UpsertSocial(int id)
    {
        if (Social.Id == 0)
        {
            var currentUser = User;
            var userId = currentUser.Id;

            await _socialMediaRepository.CreateAsync(Social, userId);
            UserSocials.Add(Social);
            UserSocials = await _socialMediaRepository.GetAllAsync(userId);

            await SocialMediaState.UpdateStateAsync(UserSocials, _socialMediaRepository);
            Social = new SocialMedia();
        }
        else
        {
            await _socialMediaRepository.UpdateAsync(Social);
            await SocialMediaState.UpdateStateAsync(UserSocials, _socialMediaRepository);
        }

        await CloseModal("upsertSocialModal", true);
    }

    private async Task DeleteSocial()
    {
        await _socialMediaRepository.DeleteAsync(SelectedSocialId);
        var item = UserSocials.FirstOrDefault(x => x.Id == SelectedSocialId);
        if (item != null)
        {
            UserSocials.Remove(item);
        }

        await SocialMediaState.UpdateStateAsync(UserSocials, _socialMediaRepository);
        await CloseModal("deleteSocialModal", true);
    }

    private void SelectPlatform(SocialMediaPlatform platform)
    {
        Social.Platform = platform;
    }

}
