@page "/manage/fonts"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.QuickGrid.EntityFrameworkAdapter

@inject IFontRepository _fontRepository
@inject IJSRuntime _JS

@if (IsProcessing)
{
    <Spinner />
}
else
{
    <HeadContent>
        <link rel="stylesheet"
              href="@($"https://fonts.googleapis.com/css?family=Sofia|Inter|Merriweather|Miniver|Oswald|Raleway|Yomogi|Silkscreen|Fresca")" />
    </HeadContent>
    <div class="container py-5">
        <div class="table-border bg-white mb-5">
            <div class="mx-3">
                <h3 class="pt-2 fs-4 fw-bold">Fonts</h3>
                <div class="row">
                    <div class="col-7">
                        <button class="btn btn-outline-primary mt-2 px-4 rounded-pill" @onclick='CallAddFontModal'>
                            <i class="bi bi-folder-plus"></i>
                            Add New
                        </button>
                        <button class="btn btn-outline-danger mt-2 px-4 rounded-pill" disabled="@(!isAnyFontSelected)" @onclick='() => OpenModal("deleteFontModal")'>
                            <i class="bi bi-trash-fill"></i>
                            Delete
                        </button>
                    </div>
                    <div class="col-5 align-content-start mb-2">
                        <SearchBar SearchItemCallback="SearchFonts" />
                    </div>
                </div>
            </div>

            <QuickGrid Items="fonts" Class="table mx-auto quickgrid-align" Pagination="pagination">
                <TemplateColumn>
                    <HeaderTemplate>
                        <SelectAllCheckbox Items="fonts" IsAllSelected="@isAllSelected" SetIsSelected="SetFontSelected" IsAllSelectedChanged="@((value) => isAllSelected = value)" />
                    </HeaderTemplate>
                    <ChildContent>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" checked="@context.IsSelected"
                                   @onchange="(e => SetFontSelected(context, ((ChangeEventArgs)e).Value is bool b && b))" />
                        </div>
                    </ChildContent>
                </TemplateColumn>

                <PropertyColumn Property="@(p => p.Id)" />
                <TemplateColumn Title="Preview" Context="font" Class="text-start">
                    <div class="fs-3 p-2 font-@font.Name.ToLower()">Aa</div>
                </TemplateColumn>
                <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
                <PropertyColumn Property="@(p => p.CssClass)" />

                <TemplateColumn Context="font">
                    <button class="btn btn-light mt-2 px-4 rounded-pill" @onclick="() => CallEditFontModal(font.Id)">Edit</button> &nbsp;
                </TemplateColumn>
            </QuickGrid>
            <Paginator State="pagination" />
        </div>
    </div>

    <UpsertModal Item="Font" ModalClose='(bool success) => CloseModal("upsertFontModal", success)' Id="Font.Id">
        <ModalFieldsTemplate>
            <EditForm Model="@Font" FormName="formFontUpsert" OnValidSubmit="() => UpsertFont(Font.Id)">
                <div class="modal-body">
                    <DataAnnotationsValidator />
                    <label>Name:</label>
                    <FieldComponent Label="Name">
                        <ValidationControl>
                            <ValidationMessage For="() => Font.Name" class="text-danger" />
                        </ValidationControl>
                        <Control>
                            <InputText @bind-Value="Font.Name" @oninput="OnNameChanged" class="form-control" />
                        </Control>
                    </FieldComponent>

                    <label class="mt-3">CSS Class:</label>
                    <FieldComponent Label="CssClass">
                        <Control>
                            <InputText @bind-Value="Font.CssClass" class="form-control" readonly />
                        </Control>
                    </FieldComponent>
                </div>

                <div class="modal-footer flex-nowrap p-0 mt-3">
                    <button type="submit" class="btn btn-lg btn-link text-decoration-none col-6 py-3 m-0 rounded-0 border-end link-primary fw-bold">
                        <span class="fs-6">@(Id == 0 ? "Add" : "Edit") Font</span>
                    </button>
                    <button type="button" class="btn btn-lg btn-link fs-6 text-decoration-none col-6 py-3 m-0 rounded-0 link-dark fw-bold" data-bs-dismiss="modal">Cancel</button>
                </div>
            </EditForm>
        </ModalFieldsTemplate>
    </UpsertModal>

    <DeleteModal Item="Font" ModalClose='(bool success) => CloseModal("deleteFontModal", success)' OnConfirm="DeleteFonts" />
}


@code {
    private IQueryable<Font>? fonts;
    private Font Font = new Font();

    private bool IsProcessing { get; set; } = true;
    private bool isAnyFontSelected = false;
    private bool isAllSelected = false;

    private int Id => Font.Id;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private string CssClass
    {
        get => Font.CssClass;
        set => Font.CssClass = value;
    }

    protected override async Task OnInitializedAsync()
    {
        fonts = await _fontRepository.GetAllAsync();
        IsProcessing = false;
    }

    private void SetFontSelected(Font font, bool selected)
    {
        font.IsSelected = selected;
        isAnyFontSelected = fonts?.Any(f => f.IsSelected) == true;
    }

    private async Task SearchFonts(string searchFilter)
    {
        fonts = await _fontRepository.GetAllAsync(searchFilter);
        isAnyFontSelected = fonts?.Any(f => f.IsSelected) == true;
    }

    private async Task DeleteFonts()
    {
        var selectedFonts = fonts?.Where(f => f.IsSelected).ToList();
        if (selectedFonts != null && selectedFonts.Any())
        {
            foreach (var font in selectedFonts)
            {
                await _fontRepository.DeleteAsync(font.Id);
            }
        }
        fonts = await _fontRepository.GetAllAsync();
        isAnyFontSelected = false;
    }

    private async Task CallAddFontModal()
    {
        Font = new Font();
        OpenModal("upsertFontModal");
    }

    private async Task CallEditFontModal(int Id)
    {
        if (Id > 0)
        {
            Font = await _fontRepository.GetByIdAsync(Id);
            OpenModal("upsertFontModal");
        }
    }

    private async Task UpsertFont(int Id)
    {
        if (Font.Id == 0)
        {
            await _fontRepository.CreateAsync(Font);
            fonts = await _fontRepository.GetAllAsync();
        }
        else
        {
            await _fontRepository.UpdateAsync(Font);
        }
        await CloseModal("upsertFontModal", true);
    }

    private void OpenModal(string modalId)
    {
        _JS.InvokeVoidAsync("showModal", modalId);
    }

    private async Task CloseModal(string modalId, bool success)
    {
        await _JS.InvokeVoidAsync("hideModal", modalId);
    }

    private void OnNameChanged(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        Font.Name = newValue;
        Font.CssClass = string.IsNullOrEmpty(newValue) ? "" : $"font-{newValue.ToLower().Replace(" ", "-")}";
    }
}
