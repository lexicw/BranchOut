@page "/manage/gradients"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.QuickGrid.EntityFrameworkAdapter

@inject IGradientRepository _gradientRepository
@inject IJSRuntime _JS

@if (IsProcessing)
{
    <Spinner />
}
else
{
    <div class="container py-5">
        <div class="table-border bg-white mb-5">
            <div class="mx-3">
                <h3 class="pt-2 fs-4 fw-bold">Gradients</h3>
                <div class="row">
                    <div class="col-7">
                        <button class="btn btn-outline-primary mt-2 px-4 rounded-pill" @onclick='AddGradient'>
                            <i class="bi bi-folder-plus"></i>
                            Add New
                        </button>
                        <button class="btn btn-outline-danger mt-2 mt-2 px-4 rounded-pill" disabled="@(!isAnyGradientSelected)" @onclick='() => OpenModal("deleteModal")'>
                            <i class="bi bi-trash-fill"></i>
                            Delete
                        </button>
                    </div>
                    <div class="col-5 align-content-start mb-2">
                        <SearchBar SearchItemCallback="SearchGradients" />
                    </div>
                </div>
            </div>

            <QuickGrid Items="gradients" Class="table mx-auto quickgrid-align" Pagination="pagination">
                <TemplateColumn>
                    <HeaderTemplate>
                        <SelectAllCheckbox Items="gradients" IsAllSelected="@isAllSelected" SetIsSelected="SetGradientSelected" IsAllSelectedChanged="@((value) => isAllSelected = value)" />
                    </HeaderTemplate>
                    <ChildContent>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" checked="@context.IsSelected"
                            @onchange="(e => SetGradientSelected(context, ((ChangeEventArgs)e).Value is bool b && b))" />

                        </div>
                    </ChildContent>
                </TemplateColumn>


                <PropertyColumn Property="@(p => p.Id)" />
                <TemplateColumn Title="Preview" Context="gradient" Class="text-center">
                    <div class="border border-1 @(gradient.CssClass)" alt="Gradient preview" style="width:60px; height:60px;" />
                </TemplateColumn>
                <PropertyColumn Property="@(p => p.Value)" Sortable="true" />
                <PropertyColumn Property="@(p => p.CssClass)" />

                <TemplateColumn Context="gradient">
                    <button class="btn btn-light mt-2 px-4 rounded-pill" @onclick="() => EditGradient(gradient.Id)">Edit</button> &nbsp;
                </TemplateColumn>
            </QuickGrid>
            <Paginator State="pagination" />
        </div>
    </div>

    <UpsertModal Item="Gradient" ModalClose='(bool success) => CloseModal("upsertModal", success)' OnConfirm="UpsertGradient" Id="Gradient.Id">
        <ModalFieldsTemplate>
            <div class="modal-fields">
                <DataAnnotationsValidator />
                <label>Value:</label>
                <FieldComponent Label="Value">
                    <ValidationControl>
                        <ValidationMessage For="() => Gradient.Value" class="text-danger" />
                    </ValidationControl>
                    <Control>
                        <InputText @bind-Value="Gradient.Value" @oninput="OnValueChanged" class="form-control" />
                    </Control>
                </FieldComponent>

                <label class="mt-3">CSS Class:</label>
                <FieldComponent Label="Value">
                    <Control>
                        <InputText @bind-Value="Gradient.CssClass" class="form-control" readonly />
                    </Control>
                </FieldComponent>
            </div>
        </ModalFieldsTemplate>
    </UpsertModal>

    <DeleteModal Item="Gradient" ModalClose='(bool success) => CloseModal("deleteModal", success)' OnConfirm="DeleteGradients" />
}


@code {
    private IQueryable<Gradient>? gradients;
    private Gradient Gradient = new Gradient();

    private bool IsProcessing { get; set; } = true;
    private bool isAnyGradientSelected = false;
    private bool isAllSelected = false;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };


    private string CssClass
    {
        get => Gradient.CssClass;
        set => Gradient.CssClass = value;
    }

    protected override async Task OnInitializedAsync()
    {
        gradients = await _gradientRepository.GetAllAsync();
        IsProcessing = false;
    }

    private void ToggleSelectAll()
    {
        isAllSelected = !isAllSelected;

        foreach (var gradient in gradients)
        {
            gradient.IsSelected = isAllSelected;
        }
    }

    private void SetGradientSelected(Gradient gradient, bool selected)
    {
        gradient.IsSelected = selected;
        isAnyGradientSelected = gradients?.Any(g => g.IsSelected) == true;
    }

    private async Task SearchGradients(string searchFilter)
    {
        var searchResults = await _gradientRepository.GetAllAsync(searchFilter);
        gradients = searchResults;
        isAnyGradientSelected = gradients?.Any(g => g.IsSelected) == true;
    }

    private async Task DeleteGradients()
    {
        var selectedGradients = gradients?.Where(g => g.IsSelected).ToList();
        if (selectedGradients != null && selectedGradients.Any())
        {
            foreach (var gradient in selectedGradients)
            {
                await _gradientRepository.DeleteAsync(gradient.Id);
            }
        }
        gradients = await _gradientRepository.GetAllAsync();
        isAnyGradientSelected = false;
    }

    private async Task CallAddGradientModal()
    {
        Gradient = new Gradient();
        OpenModal("upsertModal");
    }

    private async Task CallEditGradientModal(int Id)
    {
        if (Id > 0)
        {
            Gradient = await _gradientRepository.GetByIdAsync(Id);
            OpenModal("upsertModal");
        }
    }

    private async Task UpsertGradient()
    {
        if (Gradient.Id == 0)
        {
            await _gradientRepository.CreateAsync(Gradient);
            gradients = await _gradientRepository.GetAllAsync();
        }
        else
        {
            await _gradientRepository.UpdateAsync(Gradient);
        }
    }

    private void OpenModal(string modalId)
    {
        _JS.InvokeVoidAsync("showModal", modalId);
    }

    private async Task CloseModal(string modalId, bool success)
    {
        await _JS.InvokeVoidAsync("hideModal", modalId);
    }


    private void OnValueChanged(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";

        Gradient.Value = newValue;
        Gradient.CssClass = string.IsNullOrEmpty(newValue) ? "" : $"gradient-{newValue.ToLower().Replace(" ", "-")}";
    }
}
